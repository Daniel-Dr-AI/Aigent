{
  "name": "Aigent_Module_04_Billing_Payments",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "billing-payment",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "={{$env.ALLOWED_ORIGINS || '*'}}",
          "rawBody": false
        }
      },
      "id": "webhook-trigger-401",
      "name": "Webhook Trigger - Billing Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "{{$env.WEBHOOK_ID_BILLING}}",
      "notes": "PURPOSE: Accept billing request from Module 03 or manual trigger.\nINPUTS: telehealth_record.json or custom billing payload with patient info, service_code, amount.\nOUTPUTS: Parsed body as $json.\nCONFIG: Set ALLOWED_ORIGINS for CORS, WEBHOOK_ID_BILLING for custom path.\nINTEGRATION: Connects to Module 03 output or standalone billing system.\nPHI-SAFE: No diagnosis codes or clinical notes required/stored."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validation-email-or-customer",
              "leftValue": "={{ $json.body.patient_email || $json.body.customer_email || $json.body.customer_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "validation-amount",
              "leftValue": "={{ $json.body.amount }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "validation-service-code",
              "leftValue": "={{ $json.body.service_code }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validation-node-402",
      "name": "Validate Billing Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 300],
      "notes": "PURPOSE: Ensure required billing data present before creating invoice/payment.\nINPUTS: Webhook body with patient/customer identifier, amount, service_code.\nOUTPUTS: Routes to 'true' if valid, 'false' for validation errors.\nVALIDATION: Requires (email OR customer_id), amount > 0, service_code not empty.\nCURRENCY: Defaults to DEFAULT_CURRENCY env if not provided.\nPHI-SAFE: Only validates billing identifiers, no clinical data required."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": \"Missing required billing data\", \"message\": \"Required: (patient_email OR customer_id), amount > 0, service_code\", \"stage\": \"validation\", \"trace_id\": $now.toMillis().toString(), \"timestamp\": $now.toISO() } }}",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "error-response-403",
      "name": "Return Validation Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [650, 450],
      "notes": "PURPOSE: Return 400 error when billing data incomplete or invalid.\nINPUTS: Triggered by validation failure.\nOUTPUTS: HTTP 400 with error JSON including trace_id for debugging.\nERROR HANDLING: Clear message explaining required fields, includes stage and trace_id.\nLOGGING: trace_id allows correlation with datastore error logs."
    },
    {
      "parameters": {
        "jsCode": "// Normalize billing data and prepare for payment gateway\nconst input = $input.first().json.body;\n\n// Extract customer info\nconst customerEmail = input.patient_email || input.customer_email;\nconst customerName = input.patient_name || input.customer_name || 'Customer';\nconst customerId = input.customer_id || null;\n\n// Billing details\nconst amount = parseInt(input.amount);\nconst currency = (input.currency || $env.DEFAULT_CURRENCY || 'USD').toUpperCase();\nconst serviceCode = input.service_code;\nconst serviceDescription = input.service_description || input.service_type || 'Service Rendered';\n\n// Membership (if applicable)\nconst membershipEnabled = $env.MEMBERSHIP_ENABLED === 'true';\nconst planId = input.plan_id || null;\n\n// Generate invoice reference\nconst invoiceRef = `INV-${Date.now()}-${serviceCode}`;\n\n// Session metadata\nconst sessionId = input.session_id || null;\nconst scheduledTime = input.scheduled_time || null;\n\nreturn {\n  customer: {\n    id: customerId,\n    email: customerEmail,\n    name: customerName,\n    phone: input.patient_phone || input.customer_phone || null\n  },\n  billing: {\n    amount: amount,\n    currency: currency,\n    service_code: serviceCode,\n    service_description: serviceDescription,\n    invoice_reference: invoiceRef\n  },\n  membership: {\n    enabled: membershipEnabled && planId !== null,\n    plan_id: planId\n  },\n  metadata: {\n    session_id: sessionId,\n    scheduled_time: scheduledTime,\n    contact_id: input.contact_id || null,\n    source: 'aigent_module_04'\n  },\n  trace_id: Date.now().toString()\n};"
      },
      "id": "prepare-billing-404",
      "name": "Prepare Billing Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300],
      "notes": "PURPOSE: Normalize and structure billing data for payment gateway API.\nINPUTS: Validated webhook data.\nOUTPUTS: Structured object with customer, billing, membership, metadata.\nLOGIC: Generates unique invoice_reference, normalizes currency, handles membership flag.\nDEFAULTS: Currency from DEFAULT_CURRENCY env, service_description fallback.\nTRACE: Creates trace_id for end-to-end request tracking.\nFLEXIBILITY: Handles both patient_email (Module 03) and customer_email (direct calls)."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "GET",
        "url": "={{$env.PAYMENT_GATEWAY === 'square' ? 'https://connect.squareup.com/v2/customers/search' : 'https://api.stripe.com/v1/customers/search'}}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$env.PAYMENT_GATEWAY === 'stripe' ? 'email:\\'' + $json.customer.email + '\\'' : ''}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$env.PAYMENT_GATEWAY === 'square' ? { 'filter': { 'email_address': { 'exact': $json.customer.email } } } : ''}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "customer-lookup-405",
      "name": "Lookup Customer in Gateway",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_ID}}",
          "name": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Search for existing customer in payment gateway (Stripe or Square).\nINPUTS: Prepared customer email from billing data.\nOUTPUTS: Customer object if found, empty if not (triggers creation).\nPLATFORMS:\n  - Stripe: GET /v1/customers/search?query=email:'email@example.com'\n  - Square: POST /v2/customers/search with email filter\nCREDENTIAL: Uses PAYMENT_GATEWAY_CREDENTIAL_ID (Stripe API key or Square token).\nFALLBACK: If not found, next node creates new customer.\nALTERNATES: Can use customer_id directly if provided in input (skip lookup)."
    },
    {
      "parameters": {
        "jsCode": "// Check if customer exists, create if not\nconst lookupResult = $input.first().json;\nconst billingData = $('Prepare Billing Data').first().json;\n\nlet customerId;\nconst gateway = $env.PAYMENT_GATEWAY || 'stripe';\n\nif (gateway === 'stripe') {\n  // Stripe response format\n  if (lookupResult.data && lookupResult.data.length > 0) {\n    customerId = lookupResult.data[0].id;\n  } else {\n    // Will create new customer\n    customerId = null;\n  }\n} else if (gateway === 'square') {\n  // Square response format\n  if (lookupResult.customers && lookupResult.customers.length > 0) {\n    customerId = lookupResult.customers[0].id;\n  } else {\n    customerId = null;\n  }\n}\n\nreturn {\n  customer_exists: customerId !== null,\n  customer_id: customerId,\n  customer_email: billingData.customer.email,\n  customer_name: billingData.customer.name,\n  customer_phone: billingData.customer.phone,\n  needs_creation: customerId === null\n};"
      },
      "id": "check-customer-406",
      "name": "Check Customer Exists",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300],
      "notes": "PURPOSE: Determine if customer exists or needs creation.\nINPUTS: Lookup result from payment gateway.\nOUTPUTS: customer_exists flag, customer_id (if found), needs_creation flag.\nLOGIC: Parses Stripe or Square response format, extracts customer ID.\nDECISION: If customer_id null, next node creates new customer; else proceeds to invoice.\nERROR HANDLING: Handles empty response arrays gracefully."
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "id": "needs-creation",
              "leftValue": "={{ $json.needs_creation }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "needs-creation-check-407",
      "name": "Check Needs Customer Creation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1250, 300],
      "notes": "PURPOSE: Route to customer creation if needed, or skip to invoice creation.\nINPUTS: Check result from previous node.\nOUTPUTS: True = create customer, False = use existing customer_id.\nEFFICIENCY: Avoids unnecessary API call if customer already exists."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "={{$env.PAYMENT_GATEWAY === 'square' ? 'https://connect.squareup.com/v2/customers' : 'https://api.stripe.com/v1/customers'}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{ $('Check Customer Exists').first().json.customer_email }}"
            },
            {
              "name": "name",
              "value": "={{ $('Check Customer Exists').first().json.customer_name }}"
            },
            {
              "name": "phone",
              "value": "={{ $('Check Customer Exists').first().json.customer_phone || '' }}"
            },
            {
              "name": "metadata",
              "value": "={{ { source: 'aigent_module_04', created_at: $now.toISO() } }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "create-customer-408",
      "name": "Create Customer in Gateway",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1450, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_ID}}",
          "name": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Create new customer record in payment gateway.\nINPUTS: Customer data from Check Customer Exists node.\nOUTPUTS: New customer object with ID.\nPLATFORMS:\n  - Stripe: POST /v1/customers with email, name, phone, metadata\n  - Square: POST /v2/customers with similar structure\nMETADATA: Tags customer with source='aigent_module_04' for tracking.\nUSE CASE: First-time patient billing, no existing customer record."
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "merge-customer-409",
      "name": "Merge Customer ID",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [1650, 300],
      "notes": "PURPOSE: Consolidate customer_id from either lookup (existing) or creation (new).\nINPUTS: Either existing customer_id or newly created customer object.\nOUTPUTS: Unified customer_id for invoice creation.\nLOGIC: Merges both paths (skip creation / create customer) into single stream."
    },
    {
      "parameters": {
        "jsCode": "// Extract customer_id from either path\nconst checkResult = $('Check Customer Exists').first().json;\nconst createResult = $input.all().find(item => item.json.id || item.json.customer?.id);\n\nlet customerId;\nconst gateway = $env.PAYMENT_GATEWAY || 'stripe';\n\nif (checkResult.customer_id) {\n  // Existing customer\n  customerId = checkResult.customer_id;\n} else if (createResult) {\n  // Newly created customer\n  if (gateway === 'stripe') {\n    customerId = createResult.json.id;\n  } else if (gateway === 'square') {\n    customerId = createResult.json.customer.id;\n  }\n}\n\nconst billingData = $('Prepare Billing Data').first().json;\n\nreturn {\n  customer_id: customerId,\n  customer_email: billingData.customer.email,\n  customer_name: billingData.customer.name,\n  amount: billingData.billing.amount,\n  currency: billingData.billing.currency,\n  service_code: billingData.billing.service_code,\n  service_description: billingData.billing.service_description,\n  invoice_reference: billingData.billing.invoice_reference,\n  membership: billingData.membership,\n  metadata: billingData.metadata,\n  trace_id: billingData.trace_id\n};"
      },
      "id": "extract-customer-410",
      "name": "Extract Customer ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300],
      "notes": "PURPOSE: Extract customer_id from either existing or newly created customer.\nINPUTS: Merged customer data.\nOUTPUTS: Unified billing payload with customer_id and all billing details.\nLOGIC: Checks both existing path and creation path, handles Stripe/Square format differences.\nREADY: Output is ready for invoice creation with guaranteed customer_id."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "={{$env.PAYMENT_GATEWAY === 'square' ? 'https://connect.squareup.com/v2/invoices' : 'https://api.stripe.com/v1/invoices'}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "customer",
              "value": "={{ $json.customer_id }}"
            },
            {
              "name": "description",
              "value": "={{ $json.service_description }}"
            },
            {
              "name": "metadata",
              "value": "={{ {\n  service_code: $json.service_code,\n  session_id: $json.metadata.session_id || '',\n  invoice_reference: $json.invoice_reference,\n  trace_id: $json.trace_id\n} }}"
            },
            {
              "name": "auto_advance",
              "value": "={{$env.BILLING_MODE === 'charge_now' ? true : false}}"
            },
            {
              "name": "collection_method",
              "value": "={{$env.BILLING_MODE === 'charge_now' ? 'charge_automatically' : 'send_invoice'}}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "create-invoice-411",
      "name": "Create Invoice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2050, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_ID}}",
          "name": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Create invoice in payment gateway (Stripe or Square).\nINPUTS: Customer ID and billing details.\nOUTPUTS: Invoice object with ID and status.\nPLATFORMS:\n  - Stripe: POST /v1/invoices, then add invoice items, then finalize\n  - Square: POST /v2/invoices with line items included\nBILLING_MODE:\n  - charge_now: auto_advance=true, collection_method=charge_automatically\n  - invoice_link: auto_advance=false, collection_method=send_invoice\nMETADATA: Includes service_code, session_id, trace_id for tracking.\nNOTE: Stripe requires separate invoice item creation (next node)."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "https://api.stripe.com/v1/invoiceitems",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "customer",
              "value": "={{ $('Extract Customer ID').first().json.customer_id }}"
            },
            {
              "name": "invoice",
              "value": "={{ $json.id }}"
            },
            {
              "name": "amount",
              "value": "={{ $('Extract Customer ID').first().json.amount }}"
            },
            {
              "name": "currency",
              "value": "={{ $('Extract Customer ID').first().json.currency }}"
            },
            {
              "name": "description",
              "value": "={{ $('Extract Customer ID').first().json.service_description }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "add-invoice-item-412",
      "name": "Add Invoice Line Item (Stripe)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2250, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_ID}}",
          "name": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Add line item to Stripe invoice (Stripe-specific step).\nINPUTS: Invoice ID from Create Invoice, amount and description from billing data.\nOUTPUTS: Invoice item object.\nSTRIPE FLOW: Invoice → Invoice Item → Finalize → Pay/Link.\nSKIP FOR SQUARE: Square invoices include line items in creation request.\nAMOUNT: In smallest currency unit (cents for USD).\nNEXT: Finalize invoice to make it payable."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "https://api.stripe.com/v1/invoices/{{$('Create Invoice').first().json.id}}/finalize",
        "options": {
          "timeout": 10000
        }
      },
      "id": "finalize-invoice-413",
      "name": "Finalize Invoice (Stripe)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2250, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_ID}}",
          "name": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Finalize Stripe invoice to make it payable.\nINPUTS: Invoice ID from Create Invoice.\nOUTPUTS: Finalized invoice with hosted_invoice_url.\nSTRIPE FLOW: Draft invoice → Finalize → Ready for payment.\nSTATUS: Changes invoice status from 'draft' to 'open'.\nNEXT: If BILLING_MODE=charge_now, pay invoice; else return hosted_invoice_url.\nSKIP FOR SQUARE: Square invoices finalized on creation."
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "id": "charge-now",
              "leftValue": "={{$env.BILLING_MODE}}",
              "rightValue": "charge_now",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-billing-mode-414",
      "name": "Check Billing Mode",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2450, 300],
      "notes": "PURPOSE: Route based on BILLING_MODE env variable.\nINPUTS: Finalized invoice.\nOUTPUTS: True = charge immediately, False = return invoice link.\nMODES:\n  - charge_now: Charge default payment method immediately (card on file)\n  - invoice_link: Generate hosted payment page, send link to customer\nUSE CASES:\n  - charge_now: Returning patients with saved payment methods\n  - invoice_link: New patients, custom payment terms, patient preference"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "={{$env.PAYMENT_GATEWAY === 'square' ? 'https://connect.squareup.com/v2/invoices/' + $('Create Invoice').first().json.invoice.id + '/pay' : 'https://api.stripe.com/v1/invoices/' + $('Finalize Invoice (Stripe)').first().json.id + '/pay'}}",
        "options": {
          "timeout": 15000
        }
      },
      "id": "charge-invoice-415",
      "name": "Charge Invoice Now",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2650, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_ID}}",
          "name": "={{$env.PAYMENT_GATEWAY_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Immediately charge invoice using default payment method.\nINPUTS: Finalized invoice ID.\nOUTPUTS: Payment object with charge ID, receipt URL, status.\nPLATFORMS:\n  - Stripe: POST /v1/invoices/{id}/pay\n  - Square: POST /v2/invoices/{id}/pay\nREQUIREMENT: Customer must have default payment method on file.\nERROR: If no payment method, returns error (handle in error node).\nSUCCESS: paid=true, generates receipt_url, captures payment_id."
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "merge-payment-416",
      "name": "Merge Payment Result",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [2850, 300],
      "notes": "PURPOSE: Merge payment result (immediate charge or invoice link) into unified format.\nINPUTS: Either charge result (charge_now) or finalized invoice (invoice_link).\nOUTPUTS: Unified payment object with invoice_id, payment_id, hosted_invoice_url, paid status.\nLOGIC: Handles both billing modes in single stream for downstream processing."
    },
    {
      "parameters": {
        "jsCode": "// Format payment result for output and downstream nodes\nconst billingMode = $env.BILLING_MODE || 'invoice_link';\nconst gateway = $env.PAYMENT_GATEWAY || 'stripe';\nconst billingData = $('Extract Customer ID').first().json;\n\nlet invoiceId, paymentId, hostedInvoiceUrl, receiptUrl, paid;\n\nif (billingMode === 'charge_now') {\n  const chargeResult = $('Charge Invoice Now').first().json;\n  \n  if (gateway === 'stripe') {\n    invoiceId = chargeResult.id;\n    paymentId = chargeResult.charge || chargeResult.payment_intent;\n    hostedInvoiceUrl = chargeResult.hosted_invoice_url;\n    receiptUrl = chargeResult.charge_url || chargeResult.receipt_url;\n    paid = chargeResult.status === 'paid';\n  } else if (gateway === 'square') {\n    invoiceId = chargeResult.invoice.id;\n    paymentId = chargeResult.payment?.id || null;\n    hostedInvoiceUrl = chargeResult.invoice.public_url;\n    receiptUrl = chargeResult.payment?.receipt_url || null;\n    paid = chargeResult.invoice.status === 'PAID';\n  }\n} else {\n  // invoice_link mode\n  const invoiceResult = $('Finalize Invoice (Stripe)').first().json;\n  \n  if (gateway === 'stripe') {\n    invoiceId = invoiceResult.id;\n    paymentId = null;\n    hostedInvoiceUrl = invoiceResult.hosted_invoice_url;\n    receiptUrl = null;\n    paid = false;\n  } else if (gateway === 'square') {\n    const createResult = $('Create Invoice').first().json;\n    invoiceId = createResult.invoice.id;\n    paymentId = null;\n    hostedInvoiceUrl = createResult.invoice.public_url;\n    receiptUrl = null;\n    paid = false;\n  }\n}\n\nreturn {\n  invoice_id: invoiceId,\n  payment_id: paymentId,\n  gateway: gateway.charAt(0).toUpperCase() + gateway.slice(1),\n  amount: billingData.amount,\n  currency: billingData.currency,\n  paid: paid,\n  customer_email: billingData.customer_email,\n  customer_name: billingData.customer_name,\n  customer_id: billingData.customer_id,\n  hosted_invoice_url: hostedInvoiceUrl,\n  receipt_url: receiptUrl,\n  service_code: billingData.service_code,\n  service_description: billingData.service_description,\n  invoice_reference: billingData.invoice_reference,\n  membership: billingData.membership,\n  metadata: billingData.metadata,\n  trace_id: billingData.trace_id,\n  billing_mode: billingMode\n};"
      },
      "id": "format-payment-417",
      "name": "Format Payment Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3050, 300],
      "notes": "PURPOSE: Normalize payment result across gateways and billing modes.\nINPUTS: Merged payment data from charge or invoice link.\nOUTPUTS: Standardized payment object with invoice_id, payment_id, paid status, URLs.\nPLATFORM HANDLING: Parses Stripe vs Square response formats.\nMODE HANDLING: Differentiates charge_now (paid=true, receipt_url) vs invoice_link (paid=false, hosted_invoice_url).\nREADY: Output ready for receipt sending and accounting sync."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "method": "POST",
        "url": "https://quickbooks.api.intuit.com/v3/company/{{$env.QBO_REALM_ID}}/invoice",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "CustomerRef",
              "value": "={{ { value: '1' } }}"
            },
            {
              "name": "Line",
              "value": "={{ [{\n  DetailType: 'SalesItemLineDetail',\n  Amount: $json.amount / 100,\n  SalesItemLineDetail: {\n    ItemRef: { value: '1' },\n    Qty: 1,\n    UnitPrice: $json.amount / 100\n  },\n  Description: $json.service_description\n}] }}"
            },
            {
              "name": "TxnDate",
              "value": "={{ $now.toFormat('yyyy-MM-dd') }}"
            },
            {
              "name": "DocNumber",
              "value": "={{ $json.invoice_reference }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "sync-quickbooks-418",
      "name": "Sync to QuickBooks Online",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3250, 200],
      "credentials": {
        "oAuth2Api": {
          "id": "={{$env.QBO_CREDENTIAL_ID}}",
          "name": "={{$env.QBO_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Create invoice in QuickBooks Online for accounting records.\nINPUTS: Formatted payment result with amount, description, invoice reference.\nOUTPUTS: QuickBooks invoice object with ID.\nAPI: POST /v3/company/{realmId}/invoice with customer, line items, date.\nAMOUNT: Convert from cents to dollars (divide by 100).\nCUSTOMER: Uses default customer ID '1' (configure per practice in QBO).\nITEM: Uses default service item ID '1' (configure income account in QBO).\nALTERNATE: If ACCOUNTING_TARGET=practicesuite, skip this node.\nNEXT: If paid=true, create payment record in QBO."
    },
    {
      "parameters": {
        "operation": "send",
        "fromEmail": "={{$env.RECEIPT_FROM_EMAIL}}",
        "toEmail": "={{ $json.customer_email }}",
        "subject": "={{$env.RECEIPT_FROM_NAME || $env.BRAND_NAME || 'Your Clinic'}} - {{ $json.paid ? 'Payment Receipt' : 'Invoice' }} - {{ $json.invoice_reference }}",
        "emailType": "html",
        "message": "=<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: {{$env.BRAND_PRIMARY_COLOR || '#4F46E5'}}; color: white; padding: 30px 20px; text-align: center; }\n    .content { background: #f9fafb; padding: 30px; }\n    .invoice-box { background: white; padding: 20px; border-radius: 6px; margin: 20px 0; border-left: 4px solid {{$env.BRAND_PRIMARY_COLOR || '#4F46E5'}}; }\n    .amount { font-size: 32px; font-weight: bold; color: {{$env.BRAND_PRIMARY_COLOR || '#4F46E5'}}; margin: 20px 0; }\n    .button { background: {{$env.BRAND_PRIMARY_COLOR || '#4F46E5'}}; color: white; padding: 14px 30px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 15px 0; }\n    .footer { text-align: center; color: #6b7280; font-size: 12px; margin-top: 30px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>{{ $json.paid ? '✓ Payment Received' : '📄 Invoice' }}</h1>\n    </div>\n    <div class=\"content\">\n      <p>Hi {{ $json.customer_name.split(' ')[0] }},</p>\n      <p>{{ $json.paid ? 'Thank you for your payment!' : 'Here is your invoice for services rendered.' }}</p>\n      \n      <div class=\"invoice-box\">\n        <strong>Invoice #:</strong> {{ $json.invoice_reference }}<br>\n        <strong>Service:</strong> {{ $json.service_description }}<br>\n        <strong>Date:</strong> {{ $now.toFormat('MMMM d, yyyy') }}<br>\n        <div class=\"amount\">${{ ($json.amount / 100).toFixed(2) }} {{ $json.currency }}</div>\n        <strong>Status:</strong> <span style=\"color: {{ $json.paid ? '#10b981' : '#f59e0b' }};\">{{ $json.paid ? 'PAID' : 'PENDING' }}</span>\n      </div>\n      \n      {{ $json.paid && $json.receipt_url ? '<a href=\"' + $json.receipt_url + '\" class=\"button\">View Receipt</a>' : '' }}\n      {{ !$json.paid && $json.hosted_invoice_url ? '<a href=\"' + $json.hosted_invoice_url + '\" class=\"button\">Pay Invoice</a>' : '' }}\n      \n      <p style=\"margin-top: 30px; font-size: 14px; color: #6b7280;\">\n        Questions about this {{ $json.paid ? 'payment' : 'invoice' }}? Contact us at {{ $env.SUPPORT_EMAIL || 'support@yourclinic.com' }}\n      </p>\n    </div>\n    <div class=\"footer\">\n      <p><strong>{{ $env.BRAND_NAME || 'Your Clinic' }}</strong><br>\n      {{ $env.SUPPORT_EMAIL || 'support@yourclinic.com' }}</p>\n    </div>\n  </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-receipt-email-419",
      "name": "Send Receipt Email",
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1.1,
      "position": [3250, 300],
      "credentials": {
        "sendGridApi": {
          "id": "={{$env.SENDGRID_CREDENTIAL_ID}}",
          "name": "={{$env.SENDGRID_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Email receipt or invoice to customer.\nINPUTS: Formatted payment result with customer email, amount, status.\nOUTPUTS: SendGrid message ID.\nCONTENT:\n  - If paid=true: Payment receipt with receipt_url link\n  - If paid=false: Invoice with hosted_invoice_url pay button\nDESIGN: Branded HTML template with clinic colors, clear amount display, payment status.\nBUTTON: View Receipt (paid) or Pay Invoice (pending).\nSUPPORT: Contact email for billing questions."
    },
    {
      "parameters": {
        "operation": "send",
        "from": "={{$env.TWILIO_FROM_NUMBER}}",
        "to": "={{ $('Prepare Billing Data').first().json.customer.phone }}",
        "message": "=Hi {{ $json.customer_name.split(' ')[0] }},\n\n{{ $json.paid ? '✓ Payment received!' : '📄 Invoice ready' }}\n\nAmount: ${{ ($json.amount / 100).toFixed(2) }} {{ $json.currency }}\nInvoice: {{ $json.invoice_reference }}\n\n{{ $json.paid && $json.receipt_url ? 'Receipt: ' + $json.receipt_url : '' }}\n{{ !$json.paid && $json.hosted_invoice_url ? 'Pay now: ' + $json.hosted_invoice_url : '' }}\n\nQuestions? {{ $env.SUPPORT_EMAIL }}\n\n- {{ $env.BRAND_NAME || 'Your Clinic' }}",
        "options": {}
      },
      "id": "send-receipt-sms-420",
      "name": "Send Receipt SMS (Optional)",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1.2,
      "position": [3250, 400],
      "credentials": {
        "twilioApi": {
          "id": "={{$env.TWILIO_CREDENTIAL_ID}}",
          "name": "={{$env.TWILIO_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Send SMS receipt or payment link to customer (optional, based on SEND_SMS_RECEIPT env).\nINPUTS: Formatted payment result with customer phone, amount, status.\nOUTPUTS: Twilio message SID.\nCONTENT:\n  - If paid: Receipt confirmation with receipt link\n  - If not paid: Payment request with invoice link\nENABLE: Set SEND_SMS_RECEIPT=true to activate this node.\nSKIP: If phone number missing, node fails gracefully (handle in error node)."
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "merge-final-421",
      "name": "Merge All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [3450, 300],
      "notes": "PURPOSE: Consolidate all outputs (payment, accounting, receipt deliveries) into final response.\nINPUTS: Payment result, QuickBooks invoice, email delivery, SMS delivery.\nOUTPUTS: Unified result object with all metadata.\nUSE CASE: Provides complete execution summary for response and monitoring."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: true,\n  invoice_id: $('Format Payment Result').first().json.invoice_id,\n  payment_id: $('Format Payment Result').first().json.payment_id,\n  accounting_id: $('Sync to QuickBooks Online').first().json?.Invoice?.Id || null,\n  gateway: $('Format Payment Result').first().json.gateway,\n  amount: $('Format Payment Result').first().json.amount,\n  currency: $('Format Payment Result').first().json.currency,\n  paid: $('Format Payment Result').first().json.paid,\n  customer_email: $('Format Payment Result').first().json.customer_email,\n  customer_name: $('Format Payment Result').first().json.customer_name,\n  customer_id: $('Format Payment Result').first().json.customer_id,\n  hosted_invoice_url: $('Format Payment Result').first().json.hosted_invoice_url,\n  receipt_url: $('Format Payment Result').first().json.receipt_url,\n  invoice_reference: $('Format Payment Result').first().json.invoice_reference,\n  membership: $('Format Payment Result').first().json.membership,\n  metadata: {\n    crm_updated: false,\n    receipt_sent: $('Send Receipt Email').first().json?.messageId ? true : false,\n    sms_sent: $env.SEND_SMS_RECEIPT === 'true' && $('Send Receipt SMS (Optional)').first().json?.sid ? true : false,\n    synced_to_accounting: $('Sync to QuickBooks Online').first().json?.Invoice?.Id ? true : false,\n    session_id: $('Format Payment Result').first().json.metadata.session_id,\n    trace_id: $('Format Payment Result').first().json.trace_id,\n    timestamp: $now.toISO()\n  }\n} }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "success-response-422",
      "name": "Return Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3650, 300],
      "notes": "PURPOSE: Return standardized invoice_record.json to caller.\nINPUTS: Merged final results.\nOUTPUTS: HTTP 200 with complete billing record including invoice_id, payment_id, accounting_id, URLs, metadata.\nFORMAT: Follows invoice_record.json schema for Module 05 integration.\nMETADATA: Includes delivery statuses, trace_id for debugging, timestamp.\nINTEGRATION: Output ready for Module 05 (Follow-Up & Retention) or analytics systems."
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "id": "error-handler-423",
      "name": "Error Handler",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [3450, 500],
      "onError": "continueErrorOutput",
      "notes": "PURPOSE: Catch execution errors (API failures, payment declines, network issues).\nINPUTS: Any upstream error from payment gateway, accounting, or comms nodes.\nOUTPUTS: Error details for logging service.\nBEST PRACTICE: Connect to error notification workflow or logging service in production.\nRECOVERY: Log error with trace_id to datastore, notify staff of failed billing.\nCRITICAL: Payment failures require immediate staff attention for manual processing."
    }
  ],
  "connections": {
    "Webhook Trigger - Billing Request": {
      "main": [
        [
          {
            "node": "Validate Billing Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Billing Data": {
      "main": [
        [
          {
            "node": "Prepare Billing Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Billing Data": {
      "main": [
        [
          {
            "node": "Lookup Customer in Gateway",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Customer in Gateway": {
      "main": [
        [
          {
            "node": "Check Customer Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Customer Exists": {
      "main": [
        [
          {
            "node": "Check Needs Customer Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Needs Customer Creation": {
      "main": [
        [
          {
            "node": "Create Customer in Gateway",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Customer ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Customer in Gateway": {
      "main": [
        [
          {
            "node": "Merge Customer ID",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Customer ID": {
      "main": [
        [
          {
            "node": "Extract Customer ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Customer ID": {
      "main": [
        [
          {
            "node": "Create Invoice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Invoice": {
      "main": [
        [
          {
            "node": "Add Invoice Line Item (Stripe)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Invoice Line Item (Stripe)": {
      "main": [
        [
          {
            "node": "Finalize Invoice (Stripe)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Invoice (Stripe)": {
      "main": [
        [
          {
            "node": "Check Billing Mode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Billing Mode": {
      "main": [
        [
          {
            "node": "Charge Invoice Now",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Payment Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Charge Invoice Now": {
      "main": [
        [
          {
            "node": "Merge Payment Result",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Payment Result": {
      "main": [
        [
          {
            "node": "Format Payment Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Payment Result": {
      "main": [
        [
          {
            "node": "Sync to QuickBooks Online",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Receipt Email",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Receipt SMS (Optional)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sync to QuickBooks Online": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Receipt Email": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send Receipt SMS (Optional)": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge All Results": {
      "main": [
        [
          {
            "node": "Return Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "{{$env.ERROR_WORKFLOW_ID}}"
  },
  "staticData": null,
  "tags": [
    {
      "name": "Aigent",
      "id": "aigent-module"
    },
    {
      "name": "Clinic-Template",
      "id": "clinic-template"
    },
    {
      "name": "Billing",
      "id": "billing"
    },
    {
      "name": "Payments",
      "id": "payments"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-29T00:00:00.000Z",
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "{{$env.N8N_INSTANCE_ID}}",
    "description": "Aigent Universal Clinic Template - Module 04: Billing & Payments. Accepts service completion data from Module 03, creates invoice in Stripe/Square, charges payment or generates hosted link, sends receipt email/SMS, syncs to QuickBooks Online accounting. Returns standardized invoice_record.json with payment status and IDs.",
    "author": "Aigent Automation Engineering",
    "version": "1.0.0",
    "license": "Proprietary - Aigent Company",
    "documentation": "https://docs.aigent.company/templates/module-04",
    "dependencies": {
      "required_upstream": ["Aigent_Module_03_Telehealth_Session"],
      "optional_downstream": ["Aigent_Module_05_Followup_Retention"]
    }
  }
}
