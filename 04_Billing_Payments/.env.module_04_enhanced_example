# ═══════════════════════════════════════════════════════════════
# AIGENT MODULE 04: BILLING & PAYMENTS - ENVIRONMENT CONFIGURATION
# ═══════════════════════════════════════════════════════════════
# Version: 1.1
# Created: 2025-01-XX
# PHI Level: LOW (financial data, minimal health information)
# Compliance: PCI-DSS, HIPAA (financial transactions only)
#
# CRITICAL: This module handles financial transactions. All payment
# gateway credentials must be secured and never committed to version
# control. Use n8n's credential management system for API keys.
# ═══════════════════════════════════════════════════════════════

# ───────────────────────────────────────────────────────────────
# SECTION 1: WEBHOOK & SECURITY CONFIGURATION
# ───────────────────────────────────────────────────────────────

# Webhook Configuration
# Used by: Node 401 (Webhook Trigger)
# Purpose: Accept billing payment requests from external systems
WEBHOOK_URL=https://your-n8n-instance.com/webhook/billing-payment
ALLOWED_ORIGINS=https://your-frontend.com,https://your-crm.com

# Security: CORS and API authentication
# Recommended: Implement webhook signature verification
WEBHOOK_SECRET=your-webhook-secret-here-change-in-production

# ───────────────────────────────────────────────────────────────
# SECTION 2: PAYMENT GATEWAY CONFIGURATION
# ───────────────────────────────────────────────────────────────

# Default Payment Gateway
# Options: stripe, square
# Used by: Node 402 (Enhanced Validation)
DEFAULT_PAYMENT_GATEWAY=stripe

# Stripe Configuration
# API Keys: Use n8n credential management (DO NOT store here)
# Credential Name: stripeApi
# Required Scopes: customers, invoices, payments
STRIPE_API_VERSION=2023-10-16
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Square Configuration
# API Keys: Use n8n credential management (DO NOT store here)
# Credential Name: squareApi
# Required: Location ID for invoice creation
SQUARE_LOCATION_ID=your-square-location-id
SQUARE_ENVIRONMENT=production

# ───────────────────────────────────────────────────────────────
# SECTION 3: PAYMENT VALIDATION & FRAUD PREVENTION
# ───────────────────────────────────────────────────────────────

# Amount Validation (CRITICAL for financial integrity)
# Used by: Node 402 (Enhanced Validation)
# Purpose: Prevent erroneous or fraudulent charges
MIN_PAYMENT_AMOUNT=1.00
MAX_PAYMENT_AMOUNT=100000.00
DEFAULT_CURRENCY=USD

# Fraud Detection Configuration
# Used by: Node 404 (Fraud Detection & Velocity Checks)
# Purpose: Multi-layer fraud prevention

# Enable velocity checking (requires Redis/cache implementation)
ENABLE_VELOCITY_CHECK=false
VELOCITY_CHECK_WINDOW_HOURS=1
MAX_ATTEMPTS_PER_HOUR=5

# High-value transaction threshold (triggers manual review flag)
HIGH_VALUE_THRESHOLD=5000.00

# Disposable email blocking
BLOCK_DISPOSABLE_EMAILS=true

# Risk score thresholds (0-100 scale)
FRAUD_RISK_CRITICAL_THRESHOLD=50
FRAUD_RISK_HIGH_THRESHOLD=30
FRAUD_RISK_MEDIUM_THRESHOLD=15

# ───────────────────────────────────────────────────────────────
# SECTION 4: IDEMPOTENCY & DUPLICATE PREVENTION
# ───────────────────────────────────────────────────────────────

# Idempotency Check (prevent duplicate charges)
# Used by: Node 406 (Idempotency Check)
# Purpose: PCI-DSS best practice - prevent accidental double charges
ENABLE_IDEMPOTENCY_CHECK=true
IDEMPOTENCY_WINDOW_HOURS=24

# Duplicate Detection Strategy
# Options: memory (dev only), redis (production), database (production)
IDEMPOTENCY_STORE=redis
REDIS_URL=redis://localhost:6379
REDIS_KEY_PREFIX=aigent:billing:idempotency:

# ───────────────────────────────────────────────────────────────
# SECTION 5: PHI MASKING & DATA PRIVACY (PCI-DSS COMPLIANCE)
# ───────────────────────────────────────────────────────────────

# PHI Masking Configuration
# Used by: Node 408 (Prepare Billing Data), Node 431 (Receipt Email)
# Purpose: Minimize PHI exposure in logs and communications
ENABLE_PHI_MASKING=true
PHI_MASKING_LEVEL=2

# PCI-DSS Compliance
# CRITICAL: Never log full card numbers, CVV, or magnetic stripe data
LOG_PAYMENT_DETAILS=false
LOG_CUSTOMER_PII=false
MASK_CUSTOMER_EMAIL_IN_LOGS=true
MASK_CUSTOMER_NAME_IN_LOGS=true

# Data Retention (PCI-DSS Requirement 3.1)
# Financial data retention: 7 years (IRS requirement)
DATA_RETENTION_DAYS=2555

# ───────────────────────────────────────────────────────────────
# SECTION 6: RETRY LOGIC CONFIGURATION
# ───────────────────────────────────────────────────────────────

# Customer Lookup Retry
# Used by: Node 410 (API: Lookup Customer)
# Strategy: 3 attempts, 1s delay, exponential backoff
CUSTOMER_LOOKUP_RETRY_COUNT=3
CUSTOMER_LOOKUP_RETRY_DELAY=1000
CUSTOMER_LOOKUP_TIMEOUT=10000

# Customer Creation Retry
# Used by: Node 414 (API: Create Customer)
# Strategy: 2 attempts, 2s delay (less aggressive for creation)
CUSTOMER_CREATE_RETRY_COUNT=2
CUSTOMER_CREATE_RETRY_DELAY=2000
CUSTOMER_CREATE_TIMEOUT=10000

# Invoice Creation Retry
# Used by: Node 418 (API: Create Invoice)
# Strategy: 2 attempts, 2s delay (financial operation)
INVOICE_CREATE_RETRY_COUNT=2
INVOICE_CREATE_RETRY_DELAY=2000
INVOICE_CREATE_TIMEOUT=15000

# Line Item Addition Retry (Stripe only)
# Used by: Node 421 (API: Add Line Item)
# Strategy: 2 attempts, 1s delay
LINE_ITEM_RETRY_COUNT=2
LINE_ITEM_RETRY_DELAY=1000
LINE_ITEM_TIMEOUT=10000

# Invoice Finalization Retry
# Used by: Node 424 (API: Finalize Invoice)
# Strategy: 2 attempts, 2s delay
INVOICE_FINALIZE_RETRY_COUNT=2
INVOICE_FINALIZE_RETRY_DELAY=2000
INVOICE_FINALIZE_TIMEOUT=15000

# Payment Charge Retry
# Used by: Node 427 (API: Charge Now)
# Strategy: NO RETRY (prevent duplicate charges)
PAYMENT_CHARGE_RETRY_COUNT=0
PAYMENT_CHARGE_TIMEOUT=20000

# ───────────────────────────────────────────────────────────────
# SECTION 7: ACCOUNTING INTEGRATION (QUICKBOOKS ONLINE)
# ───────────────────────────────────────────────────────────────

# QuickBooks Online Configuration
# Used by: Node 430 (API: Sync QuickBooks)
# Credential Name: quickBooksOAuthApi
# Required Scopes: com.intuit.quickbooks.accounting
QBO_API_URL=https://quickbooks.api.intuit.com
QBO_COMPANY_ID=your-company-id-here
QBO_SERVICE_ITEM_ID=1

# QuickBooks Sync Retry Configuration
# Strategy: 3 attempts, 2s delay, continueOnFail (non-critical)
QBO_RETRY_COUNT=3
QBO_RETRY_DELAY=2000
QBO_TIMEOUT=15000
QBO_CONTINUE_ON_FAIL=true

# Sync Behavior
# Options: realtime (immediate sync), batched (sync every N minutes)
QBO_SYNC_MODE=realtime
QBO_BATCH_INTERVAL_MINUTES=15

# ───────────────────────────────────────────────────────────────
# SECTION 8: NOTIFICATION CONFIGURATION (EMAIL & SMS)
# ───────────────────────────────────────────────────────────────

# Email Configuration (SendGrid)
# Used by: Node 432 (API: Send Receipt Email)
# Credential Name: sendGridApi
# Required: BAA agreement for HIPAA compliance (if patient data included)
SENDGRID_FROM_EMAIL=billing@your-clinic.com
SENDGRID_FROM_NAME=Your Clinic Billing
SENDGRID_REPLY_TO=support@your-clinic.com

# Email Retry Configuration
# Strategy: 2 attempts, 500ms delay, continueOnFail (non-critical)
EMAIL_RETRY_COUNT=2
EMAIL_RETRY_DELAY=500
EMAIL_TIMEOUT=10000
EMAIL_CONTINUE_ON_FAIL=true

# Email Templates
# Receipt email customization
RECEIPT_EMAIL_INCLUDE_LOGO=true
RECEIPT_EMAIL_LOGO_URL=https://your-clinic.com/logo.png
RECEIPT_EMAIL_FOOTER_TEXT=Thank you for your payment!

# SMS Configuration (Twilio)
# Used by: Node 435 (API: Send Receipt SMS)
# Credential Name: twilioApi
# Required: HIPAA-compliant Twilio account (if patient data included)
TWILIO_ACCOUNT_SID=your-account-sid
TWILIO_PHONE_NUMBER=+15551234567

# SMS Retry Configuration
# Strategy: 2 attempts, 500ms delay, continueOnFail (non-critical)
SMS_RETRY_COUNT=2
SMS_RETRY_DELAY=500
SMS_TIMEOUT=10000
SMS_CONTINUE_ON_FAIL=true

# SMS Feature Toggle
# Set to false to disable SMS receipts entirely
ENABLE_RECEIPT_SMS=true
DEFAULT_SMS_PHONE=+15555551234

# ───────────────────────────────────────────────────────────────
# SECTION 9: BILLING MODES & PAYMENT BEHAVIOR
# ───────────────────────────────────────────────────────────────

# Billing Mode Configuration
# Options: charge_now (immediate charge), invoice_link (hosted payment page)
# Default: invoice_link (safer - customer controls payment timing)
DEFAULT_BILLING_MODE=invoice_link

# Charge Now Mode Settings
# Used when billing_mode = charge_now
CHARGE_NOW_REQUIRE_PAYMENT_METHOD=true
CHARGE_NOW_AUTO_CAPTURE=true

# Invoice Link Mode Settings
# Used when billing_mode = invoice_link
INVOICE_LINK_EXPIRY_DAYS=30
INVOICE_LINK_SEND_EMAIL=true
INVOICE_LINK_SEND_SMS=false

# Payment Reminders (Framework Ready)
ENABLE_PAYMENT_REMINDERS=false
REMINDER_DAYS_BEFORE_DUE=3,1
REMINDER_DAYS_AFTER_DUE=1,3,7

# ───────────────────────────────────────────────────────────────
# SECTION 10: PERFORMANCE & OBSERVABILITY
# ───────────────────────────────────────────────────────────────

# Execution Time Tracking
# Used by: Node 437 (Execution Tracking & Success Response)
ENABLE_EXECUTION_TRACKING=true

# Performance Thresholds (milliseconds)
PERFORMANCE_FAST_THRESHOLD=2000
PERFORMANCE_SLOW_THRESHOLD=5000

# Target: 3000ms average (includes payment gateway API calls)
PERFORMANCE_TARGET_MS=3000

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=json
LOG_DESTINATION=console

# Monitoring Integration (Framework Ready)
ENABLE_DATADOG_MONITORING=false
DATADOG_API_KEY=your-datadog-api-key
DATADOG_SERVICE_NAME=aigent-billing-payments

# Error Tracking (Sentry)
ENABLE_SENTRY=false
SENTRY_DSN=your-sentry-dsn
SENTRY_ENVIRONMENT=production

# ───────────────────────────────────────────────────────────────
# SECTION 11: COMPLIANCE & AUDIT
# ───────────────────────────────────────────────────────────────

# Audit Logging
# Required for PCI-DSS compliance
AUDIT_LOG_ENABLED=true
AUDIT_LOG_DESTINATION=database
AUDIT_LOG_RETENTION_DAYS=2555

# Compliance Mode
# Options: pci-dss, hipaa, both
COMPLIANCE_MODE=both

# Audit Events to Log
AUDIT_LOG_PAYMENT_ATTEMPTS=true
AUDIT_LOG_FRAUD_CHECKS=true
AUDIT_LOG_REFUNDS=true
AUDIT_LOG_CUSTOMER_CREATION=true

# Integration with Module 09 (Compliance Audit)
MODULE_09_WEBHOOK_URL=https://your-n8n-instance.com/webhook/audit-log
MODULE_09_ENABLED=true

# ───────────────────────────────────────────────────────────────
# SECTION 12: DATA CONTRACT & MODULE INTEGRATION
# ───────────────────────────────────────────────────────────────

# Data Contract 04: billing_confirmation.json
# Output schema version
DATA_CONTRACT_VERSION=1.0

# Module Integration Configuration
# Upstream Modules (data sources)
MODULE_02_ENABLED=true
MODULE_03_ENABLED=true

# Downstream Modules (data consumers)
MODULE_05_ENABLED=true
MODULE_07_ENABLED=true
MODULE_09_ENABLED=true

# Webhook URLs for downstream notifications
MODULE_05_WEBHOOK_URL=https://your-n8n-instance.com/webhook/followup
MODULE_07_WEBHOOK_URL=https://your-n8n-instance.com/webhook/analytics
MODULE_09_WEBHOOK_URL=https://your-n8n-instance.com/webhook/audit

# ───────────────────────────────────────────────────────────────
# SECTION 13: TESTING & DEVELOPMENT
# ───────────────────────────────────────────────────────────────

# Test Mode
# CRITICAL: Set to false in production
TEST_MODE=false
TEST_USE_SANDBOX_CREDENTIALS=true

# Stripe Test Mode
STRIPE_TEST_MODE=false
STRIPE_TEST_PUBLISHABLE_KEY=pk_test_xxx
STRIPE_TEST_SECRET_KEY=sk_test_xxx

# Square Test Mode
SQUARE_TEST_MODE=false
SQUARE_TEST_APPLICATION_ID=sandbox-xxx
SQUARE_TEST_ACCESS_TOKEN=sandbox-xxx

# Mock Payment Responses (Development Only)
MOCK_PAYMENT_SUCCESS=false
MOCK_PAYMENT_FAILURE=false
MOCK_PAYMENT_DELAY_MS=0

# ───────────────────────────────────────────────────────────────
# VALIDATION CHECKLIST
# ───────────────────────────────────────────────────────────────
# Before deploying to production, verify:
#
# [ ] All payment gateway credentials configured in n8n credential manager
# [ ] Webhook secret changed from example value
# [ ] Test mode disabled (TEST_MODE=false)
# [ ] Production payment gateway credentials active
# [ ] HTTPS enabled on all webhook URLs
# [ ] Fraud detection thresholds reviewed and adjusted
# [ ] Idempotency check enabled and tested
# [ ] PHI masking enabled for production
# [ ] Retry logic tested for all API calls
# [ ] QuickBooks OAuth connection established
# [ ] SendGrid BAA signed (if HIPAA applicable)
# [ ] Twilio HIPAA account active (if HIPAA applicable)
# [ ] Audit logging enabled and destination configured
# [ ] Performance monitoring configured
# [ ] Payment reminder schedule configured (if enabled)
# [ ] Data retention policies comply with regulations (PCI-DSS, IRS)
# [ ] Error tracking integration tested
# [ ] Load testing completed for expected transaction volume
# [ ] Disaster recovery plan documented
# [ ] PCI-DSS self-assessment questionnaire completed
#
# ═══════════════════════════════════════════════════════════════

# ───────────────────────────────────────────────────────────────
# PCI-DSS COMPLIANCE NOTES
# ───────────────────────────────────────────────────────────────
#
# This module handles payment card information and must comply with
# PCI-DSS (Payment Card Industry Data Security Standard).
#
# Key Requirements Implemented:
# 1. No storage of full card numbers, CVV, or magnetic stripe data
# 2. Encryption in transit (HTTPS for all API calls)
# 3. Access control (n8n credential management)
# 4. Logging and monitoring (audit trail enabled)
# 5. Secure coding practices (input validation, idempotency)
#
# Key Requirements NOT Handled by This Module (Infrastructure):
# 1. Network segmentation and firewall configuration
# 2. Encryption at rest (database level)
# 3. Regular security testing and vulnerability scanning
# 4. Physical security of servers
#
# Consult your PCI-DSS Qualified Security Assessor (QSA) for
# complete compliance guidance.
#
# ═══════════════════════════════════════════════════════════════

# ───────────────────────────────────────────────────────────────
# TROUBLESHOOTING GUIDE
# ───────────────────────────────────────────────────────────────
#
# Common Issues:
#
# 1. Payment fails with "Customer not found"
#    - Check DEFAULT_PAYMENT_GATEWAY matches credential
#    - Verify customer_id format (Stripe: cus_xxx, Square: xxx)
#
# 2. Invoice creation fails
#    - Verify SQUARE_LOCATION_ID is set (Square only)
#    - Check API credential permissions (invoices scope required)
#
# 3. QuickBooks sync fails
#    - Refresh OAuth token in n8n credentials
#    - Verify QBO_COMPANY_ID matches your QuickBooks account
#    - Check QBO_SERVICE_ITEM_ID exists in QuickBooks
#
# 4. Fraud detection blocking legitimate transactions
#    - Adjust thresholds: FRAUD_RISK_*_THRESHOLD
#    - Review BLOCK_DISPOSABLE_EMAILS setting
#    - Check HIGH_VALUE_THRESHOLD setting
#
# 5. Duplicate transaction errors
#    - Verify ENABLE_IDEMPOTENCY_CHECK=true
#    - Check Redis connection (if using Redis store)
#    - Review IDEMPOTENCY_WINDOW_HOURS setting
#
# 6. Slow execution times (>5000ms)
#    - Check payment gateway API response times
#    - Review retry configuration (too aggressive?)
#    - Verify network connectivity to payment gateways
#    - Consider increasing timeouts for slow connections
#
# ═══════════════════════════════════════════════════════════════
