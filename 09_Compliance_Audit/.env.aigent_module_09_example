# ============================================
# Aigent Module 09 - Compliance & Audit Logging
# Environment Configuration Template
# ============================================
# Version: 1.0.0
# Last Updated: 2025-10-30
#
# Purpose:
# This module provides HIPAA-compliant, tamper-evident audit logging
# for the entire Aigent Universal Clinic Template chain (Modules 01-08).
# It accepts audit events, normalizes them, applies PHI minimization,
# computes cryptographic hash chains, persists to durable storage,
# archives to S3, and triggers alerts on high-risk activities.
#
# Usage:
# 1. Copy this file to .env
# 2. Replace placeholder values with your actual credentials
# 3. Configure primary storage (PostgreSQL recommended)
# 4. Configure secondary archive (S3 recommended)
# 5. Set alert channels (Slack, Email)
# 6. Adjust retention and masking policies
# ============================================

# ============================================
# GENERAL SETTINGS
# ============================================

# Brand/Clinic Name
BRAND_NAME=Your Clinic Name

# Debug Mode (set to true for verbose logging)
DEBUG_MODE=false

# Allowed Origins (CORS) - comma-separated
ALLOWED_ORIGINS=*

# Timezone (for after-hours detection)
TIMEZONE=America/New_York

# Error Workflow ID (optional n8n error handler)
ERROR_WORKFLOW_ID=

# ============================================
# PRIMARY STORAGE BACKEND
# ============================================
# Choose one: postgres | sheets | airtable
# Recommendation: Use postgres for production (best performance, ACID)

LOG_PRIMARY=postgres

# --- PostgreSQL Configuration (RECOMMENDED) ---
# High-performance, ACID-compliant, supports JSONB queries
POSTGRES_CREDENTIAL_ID=your_postgres_credential_id
PG_CONN_STRING=postgresql://audit_user:secure_password@localhost:5432/audit_db
PG_TABLE=audit_log

# SQL Schema (run before first use):
# CREATE TABLE audit_log (
#   audit_id VARCHAR(255) PRIMARY KEY,
#   ts TIMESTAMP WITH TIME ZONE NOT NULL,
#   module VARCHAR(255) NOT NULL,
#   event VARCHAR(255) NOT NULL,
#   severity VARCHAR(50) NOT NULL,
#   actor_type VARCHAR(50),
#   actor_id VARCHAR(255),
#   actor_ip VARCHAR(100),
#   resource_type VARCHAR(255),
#   resource_id VARCHAR(255),
#   payload_json JSONB,
#   record_hash VARCHAR(64) NOT NULL,
#   prev_hash VARCHAR(64) NOT NULL,
#   retention_expires_at TIMESTAMP WITH TIME ZONE,
#   trace_id VARCHAR(255),
#   created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
# );
#
# CREATE INDEX idx_audit_ts ON audit_log(ts DESC);
# CREATE INDEX idx_audit_module ON audit_log(module);
# CREATE INDEX idx_audit_event ON audit_log(event);
# CREATE INDEX idx_audit_severity ON audit_log(severity);
# CREATE INDEX idx_audit_actor ON audit_log(actor_id);
# CREATE INDEX idx_audit_resource ON audit_log(resource_id);
# CREATE INDEX idx_audit_trace ON audit_log(trace_id);
# CREATE INDEX idx_audit_hash ON audit_log(record_hash);

# --- Google Sheets Configuration (LIGHTWEIGHT) ---
# Suitable for <10,000 records or proof-of-concept
GOOGLE_SHEETS_CREDENTIAL_ID=your_gsheets_credential_id
GOOGLE_SHEET_ID=1aBcDeFgHiJkLmNoPqRsTuVwXyZ
GOOGLE_SHEET_TAB=AuditLog

# Sheet Headers (Row 1):
# audit_id | ts | module | event | severity | actor_type | actor_id | actor_ip |
# resource_type | resource_id | payload_json | record_hash | prev_hash |
# retention_expires_at | trace_id

# --- Airtable Configuration (MEDIUM VOLUME) ---
# Good for 10k-100k records with relational needs
AIRTABLE_CREDENTIAL_ID=your_airtable_credential_id
AIRTABLE_BASE_ID=appXXXXXXXXXXXXXX
AIRTABLE_TABLE=AuditLog

# Airtable Fields:
# - audit_id (Single line text, Primary)
# - ts (Date with time)
# - module (Single select or text)
# - event (Single select or text)
# - severity (Single select: info, warning, high, critical)
# - actor_type (Single line text)
# - actor_id (Single line text)
# - actor_ip (Single line text)
# - resource_type (Single line text)
# - resource_id (Single line text)
# - payload_json (Long text, JSON)
# - record_hash (Single line text)
# - prev_hash (Single line text)
# - retention_expires_at (Date with time)
# - trace_id (Single line text)

# ============================================
# SECONDARY ARCHIVE BACKEND
# ============================================
# Choose one: s3 | gdrive | none
# Recommendation: Use s3 for immutable, encrypted cold storage

LOG_SECONDARY=s3

# --- AWS S3 Configuration (RECOMMENDED) ---
# Append-only JSONL archive with server-side encryption
AWS_CREDENTIAL_ID=your_aws_credential_id
S3_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
S3_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
S3_REGION=us-east-1
S3_BUCKET=aigent-audit-archive
S3_PREFIX=audit/
S3_PARTITION_FORMAT=yyyy/MM/dd/HH
S3_SERVER_SIDE_ENCRYPTION=AES256
SIGNED_URL_TTL_SECONDS=600

# Partition Formats:
# - yyyy/MM/dd/HH (hourly, recommended for high volume)
# - yyyy/MM/dd (daily, good for medium volume)
# - yyyy/MM (monthly, low volume)

# Server-Side Encryption Options:
# - AES256 (S3-managed keys)
# - aws:kms (KMS-managed keys, requires KMS_KEY_ID)

# --- Google Drive Configuration (FALLBACK) ---
# Individual JSON files per audit record
GDRIVE_CREDENTIAL_ID=your_gdrive_credential_id
GDRIVE_FOLDER_ID=1aBcDeFgHiJkLmNoPqRsTuVwXyZ

# ============================================
# CRYPTOGRAPHIC HASH CHAIN
# ============================================

# Genesis Hash (first record's prev_hash)
GENESIS_HASH=0000000000000000000000000000000000000000000000000000000000000000

# Hash Algorithm (currently SHA-256, do not change)
HASH_ALGORITHM=SHA-256

# ============================================
# PHI MINIMIZATION & MASKING
# ============================================

# Mask email local part (keep first char + domain)
# Example: john.doe@example.com → j***@example.com
MASK_EMAIL_LOCAL=true

# Mask IP addresses (keep first 3 octets for IPv4, first 4 groups for IPv6)
# Example: 203.0.113.42 → 203.0.113.***
MASK_IP=true

# Mask IDs (keep last N digits only)
# Example: patient_id=123456789 → ***6789 (if N=4)
MASK_ID_LAST_DIGITS=4

# Redacted Fields (always removed entirely)
# These patterns are hard-coded in Node 903:
# - ssn, password, token, secret, credit_card, cvv

# ============================================
# RETENTION POLICY
# ============================================

# Retention period in days (default: 2555 days ≈ 7 years for HIPAA)
RETENTION_DAYS=2555

# Automatic purge enabled (requires separate scheduled workflow)
AUTO_PURGE_ENABLED=false

# Purge schedule (cron format, runs in separate workflow)
PURGE_SCHEDULE=0 2 * * 0

# Proof-of-deletion logging (creates audit record when purging)
LOG_DELETIONS=true

# ============================================
# ALERT CONFIGURATION
# ============================================

# Alert on these severity levels (comma-separated)
# Options: info, warning, high, critical
ALERT_SEVERITY=warning,high,critical

# Watch Events (trigger alerts regardless of severity)
# Comma-separated list of event names to always alert on
WATCH_EVENTS=document_export,bulk_download,bulk_export,mass_delete,login_failure,auth_failure,phi_access

# After-Hours Monitoring
# Alert on PHI access outside business hours
AFTER_HOURS_START=18:00
AFTER_HOURS_END=08:00

# PHI Access Events (used for after-hours detection)
# These event types are considered PHI access:
# - phi_access
# - document_view
# - patient_record_access
# - document_export
# Plus any event with resource_type = patient_record or document

# --- Slack Alerts ---
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXX
SLACK_ALERT_CHANNEL=#security-alerts

# --- Email Alerts ---
SMTP_CREDENTIAL_ID=your_smtp_credential_id
ALERT_EMAIL=security@yourclinic.com
ALERT_FROM_EMAIL=noreply@yourclinic.com

# SendGrid (alternative to SMTP)
SENDGRID_API_KEY=SG.XXXXXXXXXXXXXXXXXXXX
SENDGRID_FROM_EMAIL=noreply@yourclinic.com

# ============================================
# WEBHOOK CONFIGURATION
# ============================================

# Webhook Path (Node 901)
# Full URL: https://your-n8n.com/webhook/aigent-audit-log
WEBHOOK_PATH=aigent-audit-log

# Webhook Authentication (optional)
# If using n8n auth, configure in webhook node settings
WEBHOOK_AUTH_ENABLED=false
WEBHOOK_AUTH_HEADER=X-Audit-Token
WEBHOOK_AUTH_TOKEN=your_secure_token_here

# ============================================
# UPSTREAM MODULE INTEGRATION
# ============================================

# Module 01 - Intake & Lead Capture
# Events: lead_created, lead_updated, lead_converted
MODULE_01_ENABLED=true

# Module 02 - Consult Booking & Scheduling
# Events: appointment_booked, appointment_cancelled, appointment_rescheduled
MODULE_02_ENABLED=true

# Module 03 - Telehealth Session
# Events: session_started, session_ended, session_recorded
MODULE_03_ENABLED=true

# Module 04 - Billing & Payments
# Events: invoice_created, payment_processed, refund_issued
MODULE_04_ENABLED=true

# Module 05 - Follow-Up & Retention
# Events: followup_sent, followup_responded, patient_churned
MODULE_05_ENABLED=true

# Module 06 - Document Capture & OCR
# Events: document_uploaded, document_processed, document_exported
MODULE_06_ENABLED=true

# Module 07 - Analytics & Reporting
# Events: report_generated, dashboard_viewed, data_exported
MODULE_07_ENABLED=true

# Module 08 - Messaging & Omnichannel
# Events: message_sent, message_received, conversation_started
MODULE_08_ENABLED=true

# ============================================
# PERFORMANCE & SCALABILITY
# ============================================

# Batch Size (for bulk operations, future use)
BATCH_SIZE=100

# Query Timeout (seconds)
QUERY_TIMEOUT=30

# Connection Pool (PostgreSQL)
PG_POOL_MIN=2
PG_POOL_MAX=10

# Archive Compression (gzip JSONL before S3 upload, future use)
ARCHIVE_COMPRESS=false

# ============================================
# COMPLIANCE & SECURITY
# ============================================

# HIPAA BAA Signed with Vendors
# Ensure you have Business Associate Agreements with:
# - AWS (S3): https://aws.amazon.com/compliance/hipaa-compliance/
# - PostgreSQL hosting provider
# - n8n (if using n8n Cloud): https://n8n.io/legal/business-associate-agreement

# Encryption at Rest
# - PostgreSQL: Enable in database config
# - S3: Enabled via S3_SERVER_SIDE_ENCRYPTION
# - Google Sheets: Encrypted by default (Google-managed keys)
# - Airtable: Encrypted by default (Airtable-managed keys)

# Encryption in Transit
# - All webhooks MUST use HTTPS
# - All API calls MUST use TLS 1.2+

# Access Controls
# - Restrict n8n workflow access to authorized personnel only
# - Use least-privilege credentials for all integrations
# - Rotate credentials quarterly

# Audit Log Access
# - Log all access to audit logs themselves (meta-audit)
# - Restrict query access via database roles/views
# - Use read-only replicas for reporting queries

# ============================================
# TESTING & VALIDATION
# ============================================

# Test Mode (uses test credentials, skips alerts)
TEST_MODE=false

# Test Events (comma-separated list of test trace_ids to ignore)
TEST_TRACE_IDS=test_trace_001,test_trace_002

# Validation Mode (strict schema validation, fails on unknown fields)
STRICT_VALIDATION=false

# ============================================
# MONITORING & OBSERVABILITY
# ============================================

# Workflow Execution Logging
LOG_EXECUTIONS=true

# Failed Execution Alerts
ALERT_ON_FAILURE=true

# Dead Letter Queue (S3 path for failed events)
DLQ_ENABLED=true
DLQ_S3_PATH=dead-letter/

# Metrics Export (Prometheus, future use)
METRICS_ENABLED=false
METRICS_PORT=9090

# Health Check Endpoint (future use)
HEALTH_CHECK_ENABLED=false
HEALTH_CHECK_PATH=/health

# ============================================
# BACKUP & DISASTER RECOVERY
# ============================================

# Database Backup Schedule (handled by DB provider)
# Recommendation: Daily automated backups with 30-day retention

# S3 Archive Backup (cross-region replication)
S3_BACKUP_REGION=us-west-2
S3_BACKUP_BUCKET=aigent-audit-archive-backup

# Point-in-Time Recovery (PostgreSQL)
# Enable WAL archiving and PITR in PostgreSQL config

# ============================================
# ADVANCED CONFIGURATION
# ============================================

# Custom Event Schema Extensions (future use)
CUSTOM_FIELDS_ENABLED=false
CUSTOM_FIELDS_SCHEMA={}

# Webhook Retry Policy (for downstream webhooks, future use)
WEBHOOK_RETRY_ENABLED=false
WEBHOOK_RETRY_MAX_ATTEMPTS=3
WEBHOOK_RETRY_BACKOFF=exponential

# Rate Limiting (requests per minute, future use)
RATE_LIMIT_ENABLED=false
RATE_LIMIT_RPM=1000

# Queue Backend (for high-volume async processing, future use)
QUEUE_ENABLED=false
QUEUE_TYPE=redis
QUEUE_URL=redis://localhost:6379

# ============================================
# NOTES
# ============================================

# 1. PostgreSQL Setup:
#    - Create database: createdb audit_db
#    - Create user: CREATE USER audit_user WITH PASSWORD 'secure_password';
#    - Grant permissions: GRANT ALL ON DATABASE audit_db TO audit_user;
#    - Run schema SQL (see PG_TABLE section above)

# 2. S3 Bucket Setup:
#    - Create bucket with private access
#    - Enable default encryption (AES-256 or KMS)
#    - Configure lifecycle policy for retention (move to Glacier after 1 year)
#    - Enable versioning for immutability
#    - Configure bucket policy to deny unencrypted uploads

# 3. IAM Policy (S3):
#    {
#      "Version": "2012-10-17",
#      "Statement": [
#        {
#          "Effect": "Allow",
#          "Action": [
#            "s3:PutObject",
#            "s3:GetObject",
#            "s3:ListBucket"
#          ],
#          "Resource": [
#            "arn:aws:s3:::aigent-audit-archive/*",
#            "arn:aws:s3:::aigent-audit-archive"
#          ]
#        }
#      ]
#    }

# 4. Alert Testing:
#    - Send test event: curl -X POST https://your-n8n.com/webhook/aigent-audit-log \
#                         -H "Content-Type: application/json" \
#                         -d '{"module":"test","event":"test_alert","severity":"high","timestamp":"2025-10-30T14:00:00Z"}'
#    - Verify Slack and Email alerts received

# 5. Hash Chain Verification:
#    - Query records: SELECT audit_id, record_hash, prev_hash FROM audit_log ORDER BY ts;
#    - Verify each record: hash(record_data + prev_hash) = record_hash
#    - Detect tampering: any mismatch indicates altered record

# 6. Retention Purge (manual):
#    - Query expired: SELECT * FROM audit_log WHERE retention_expires_at < NOW();
#    - Archive first: pg_dump --table=audit_log --where="retention_expires_at < NOW()" > expired.sql
#    - Delete: DELETE FROM audit_log WHERE retention_expires_at < NOW();

# ============================================
# END OF CONFIGURATION
# ============================================
