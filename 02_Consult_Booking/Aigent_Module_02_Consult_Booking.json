{
  "name": "Aigent_Module_02_Consult_Booking",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "consult-booking",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "={{$env.ALLOWED_ORIGINS || '*'}}",
          "rawBody": false
        }
      },
      "id": "webhook-trigger-201",
      "name": "Webhook Trigger - Booking Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "{{$env.WEBHOOK_ID_BOOKING}}",
      "notes": "PURPOSE: Accept booking requests from Module 01 or direct booking forms.\nINPUTS: JSON with contact_id, email, name, phone, preferred_date, preferred_time, service_type.\nOUTPUTS: Parsed body as $json.\nCONFIG: Set ALLOWED_ORIGINS for CORS, WEBHOOK_ID_BOOKING for custom path.\nINTEGRATION: Connects to Module 01 output or standalone booking widget."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validation-email",
              "leftValue": "={{ $json.body.email }}",
              "rightValue": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            },
            {
              "id": "validation-name",
              "leftValue": "={{ $json.body.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "validation-phone",
              "leftValue": "={{ $json.body.phone }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "validation-service",
              "leftValue": "={{ $json.body.service_type }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validation-node-202",
      "name": "Validate Booking Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 300],
      "notes": "PURPOSE: Enforce data quality before scheduling API calls.\nINPUTS: Webhook body with patient and booking details.\nOUTPUTS: Routes to 'true' if valid, 'false' for validation errors.\nVALIDATION: Email format, required fields (name, phone, service_type).\nNOTE: preferred_date/time are optional; scheduling system will suggest if missing."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": \"Missing or invalid required fields: email, name, phone, service_type\", \"timestamp\": $now.toISO() } }}",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "error-response-203",
      "name": "Return Validation Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [650, 450],
      "notes": "PURPOSE: Return 400 error when booking data is incomplete or invalid.\nINPUTS: Triggered by validation failure.\nOUTPUTS: HTTP 400 with error JSON.\nERROR HANDLING: Clear message to client, no PHI exposure."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "GET",
        "url": "={{$env.SCHEDULING_API_BASE_URL}}/availability",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "eventTypeId",
              "value": "={{$env.SCHEDULING_EVENT_TYPE_ID}}"
            },
            {
              "name": "startTime",
              "value": "={{ $json.body.preferred_date ? $json.body.preferred_date : $now.plus({days: 1}).toISO() }}"
            },
            {
              "name": "endTime",
              "value": "={{ $json.body.preferred_date ? DateTime.fromISO($json.body.preferred_date).plus({days: 7}).toISO() : $now.plus({days: 8}).toISO() }}"
            },
            {
              "name": "timeZone",
              "value": "={{$env.CLINIC_TIMEZONE || 'America/New_York'}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "availability-check-204",
      "name": "Check Scheduling Availability",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{$env.SCHEDULING_CREDENTIAL_ID}}",
          "name": "{{$env.SCHEDULING_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Query scheduling system (Cal.com/Acuity/SimplyBook) for available time slots.\nINPUTS: Validated booking request with preferred date/time.\nOUTPUTS: Array of available slots or next available time.\nCONFIG: SCHEDULING_API_BASE_URL, SCHEDULING_EVENT_TYPE_ID, CLINIC_TIMEZONE.\nALTERNATES: Swap for Cal.com node, Acuity Scheduling node, or custom API.\nNOTE: If preferred_date missing, checks next 7 days from tomorrow."
    },
    {
      "parameters": {
        "jsCode": "// Extract best available slot based on patient preference\nconst availableSlots = $input.first().json.slots || [];\nconst preferredTime = $input.first().json.body?.preferred_time;\nconst preferredDate = $input.first().json.body?.preferred_date;\n\nlet selectedSlot;\n\nif (availableSlots.length === 0) {\n  return {\n    error: true,\n    message: 'No available slots in the requested timeframe',\n    retry_after: DateTime.now().plus({days: 7}).toISO()\n  };\n}\n\n// If patient specified preference, find closest match\nif (preferredDate && preferredTime) {\n  const preferredDateTime = DateTime.fromISO(`${preferredDate}T${preferredTime}`);\n  \n  selectedSlot = availableSlots.reduce((closest, slot) => {\n    const slotTime = DateTime.fromISO(slot.time);\n    const closestTime = DateTime.fromISO(closest.time);\n    \n    return Math.abs(slotTime - preferredDateTime) < Math.abs(closestTime - preferredDateTime)\n      ? slot\n      : closest;\n  });\n} else {\n  // Default to first available slot\n  selectedSlot = availableSlots[0];\n}\n\nreturn {\n  selected_slot: selectedSlot,\n  slot_time: selectedSlot.time,\n  slot_id: selectedSlot.id || selectedSlot.time,\n  duration: selectedSlot.duration || parseInt($env.DEFAULT_APPOINTMENT_DURATION) || 30,\n  alternatives: availableSlots.slice(0, 3) // Return 3 options for flexibility\n};"
      },
      "id": "slot-selection-205",
      "name": "Select Best Time Slot",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300],
      "notes": "PURPOSE: Intelligently select appointment time based on patient preference and availability.\nINPUTS: Available slots from scheduling API + patient preferred date/time.\nOUTPUTS: selected_slot object with time, id, duration, plus 3 alternative slots.\nLOGIC: If patient specified time, find closest match; otherwise use first available.\nERROR: Returns error object if no slots available, includes retry_after date.\nCUSTOMIZATION: Modify logic for business rules (e.g., buffer times, provider preferences)."
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "={{$env.SCHEDULING_API_BASE_URL}}/bookings",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "eventTypeId",
              "value": "={{$env.SCHEDULING_EVENT_TYPE_ID}}"
            },
            {
              "name": "start",
              "value": "={{ $json.slot_time }}"
            },
            {
              "name": "responses",
              "value": "={{ {\n  name: $('Webhook Trigger - Booking Request').first().json.body.name,\n  email: $('Webhook Trigger - Booking Request').first().json.body.email,\n  phone: $('Webhook Trigger - Booking Request').first().json.body.phone,\n  notes: $('Webhook Trigger - Booking Request').first().json.body.notes || '',\n  service_type: $('Webhook Trigger - Booking Request').first().json.body.service_type\n} }}"
            },
            {
              "name": "timeZone",
              "value": "={{$env.CLINIC_TIMEZONE || 'America/New_York'}}"
            },
            {
              "name": "language",
              "value": "={{$env.DEFAULT_LANGUAGE || 'en'}}"
            },
            {
              "name": "metadata",
              "value": "={{ {\n  source: 'aigent_module_02',\n  contact_id: $('Webhook Trigger - Booking Request').first().json.body.contact_id || '',\n  referral_source: $('Webhook Trigger - Booking Request').first().json.body.referral_source || 'direct'\n} }}"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          }
        }
      },
      "id": "create-booking-206",
      "name": "Create Booking in Scheduling System",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1050, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "{{$env.SCHEDULING_CREDENTIAL_ID}}",
          "name": "{{$env.SCHEDULING_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Create confirmed appointment in scheduling system (Cal.com/Acuity/SimplyBook).\nINPUTS: Selected time slot + patient details from webhook.\nOUTPUTS: Booking confirmation with appointment_id, booking URL, calendar invite.\nCONFIG: SCHEDULING_API_BASE_URL, SCHEDULING_EVENT_TYPE_ID for service/provider mapping.\nMETADATA: Includes Module 01 contact_id for cross-module tracking.\nALTERNATES: Replace with Cal.com node, Acuity node, or Google Calendar API.\nTIMEOUT: 15s to accommodate external calendar sync delays."
    },
    {
      "parameters": {
        "operation": "update",
        "id": "={{ $('Webhook Trigger - Booking Request').first().json.body.contact_id }}",
        "updateFields": {
          "appointment_status": "SCHEDULED",
          "appointment_date": "={{ $json.start || $json.startTime }}",
          "appointment_id": "={{ $json.id || $json.uid }}",
          "last_booking_date": "={{ $now.toISO() }}",
          "lifecycle_stage": "opportunity",
          "hs_lead_status": "APPOINTMENT_SCHEDULED"
        },
        "options": {}
      },
      "id": "crm-update-207",
      "name": "Update CRM with Booking Status",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2,
      "position": [1250, 200],
      "credentials": {
        "hubspotApi": {
          "id": "{{$env.HUBSPOT_CREDENTIAL_ID}}",
          "name": "{{$env.HUBSPOT_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Update CRM contact record with appointment details and status.\nINPUTS: Booking confirmation from scheduling system + contact_id from Module 01.\nOUTPUTS: Updated CRM contact object.\nFIELDS UPDATED: appointment_status, appointment_date, appointment_id, lifecycle_stage.\nSTATUS PROGRESSION: Moves contact from 'lead' to 'opportunity' stage.\nALTERNATES: Swap for Salesforce, Zoho, or custom CRM API.\nERROR HANDLING: If contact_id missing, creates CRM activity instead of contact update."
    },
    {
      "parameters": {
        "operation": "send",
        "from": "={{$env.TWILIO_FROM_NUMBER}}",
        "to": "={{ $('Webhook Trigger - Booking Request').first().json.body.phone }}",
        "message": "=Hi {{ $('Webhook Trigger - Booking Request').first().json.body.name.split(' ')[0] }},\n\nYour {{ $('Webhook Trigger - Booking Request').first().json.body.service_type }} appointment is confirmed!\n\n📅 {{ DateTime.fromISO($json.start || $json.startTime).toFormat('EEEE, MMMM d') }}\n🕐 {{ DateTime.fromISO($json.start || $json.startTime).toFormat('h:mm a') }}\n📍 {{ $env.CLINIC_NAME }}\n\nBooking ID: {{ ($json.id || $json.uid).substring(0, 8) }}\n\nNeed to reschedule? Reply RESCHEDULE\nQuestions? Call {{ $env.CLINIC_PHONE }}\n\n- {{ $env.CLINIC_NAME }} Team",
        "options": {}
      },
      "id": "sms-confirmation-208",
      "name": "Send SMS Confirmation",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1.2,
      "position": [1250, 300],
      "credentials": {
        "twilioApi": {
          "id": "{{$env.TWILIO_CREDENTIAL_ID}}",
          "name": "{{$env.TWILIO_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Send immediate SMS confirmation to patient with appointment details.\nINPUTS: Booking confirmation + patient phone from webhook.\nOUTPUTS: Twilio message SID and delivery status.\nCONFIG: TWILIO_FROM_NUMBER (clinic's Twilio number), CLINIC_NAME, CLINIC_PHONE.\nMESSAGE CONTENT: Friendly greeting, date/time, location, booking ID, reschedule option.\nALTERNATES: Replace with SendGrid (email), WhatsApp Business API, or Vonage SMS.\nCOMPLIANCE: Ensure patient opted in for SMS communications (TCPA)."
    },
    {
      "parameters": {
        "operation": "send",
        "fromEmail": "={{$env.SENDGRID_FROM_EMAIL}}",
        "toEmail": "={{ $('Webhook Trigger - Booking Request').first().json.body.email }}",
        "subject": "=Appointment Confirmed - {{ DateTime.fromISO($json.start || $json.startTime).toFormat('MMM d, yyyy') }}",
        "emailType": "html",
        "message": "=<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: {{$env.BRAND_PRIMARY_COLOR || '#4F46E5'}}; color: white; padding: 20px; text-align: center; }\n    .content { background: #f9fafb; padding: 30px; border-radius: 8px; margin: 20px 0; }\n    .detail-row { margin: 15px 0; }\n    .label { font-weight: bold; color: #6b7280; }\n    .value { color: #111827; font-size: 16px; }\n    .button { background: {{$env.BRAND_PRIMARY_COLOR || '#4F46E5'}}; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0; }\n    .footer { text-align: center; color: #6b7280; font-size: 12px; margin-top: 30px; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>Appointment Confirmed</h1>\n    </div>\n    <div class=\"content\">\n      <p>Hi {{ $('Webhook Trigger - Booking Request').first().json.body.name.split(' ')[0] }},</p>\n      <p>Your appointment has been successfully scheduled. We look forward to seeing you!</p>\n      \n      <div class=\"detail-row\">\n        <div class=\"label\">Service</div>\n        <div class=\"value\">{{ $('Webhook Trigger - Booking Request').first().json.body.service_type }}</div>\n      </div>\n      \n      <div class=\"detail-row\">\n        <div class=\"label\">Date & Time</div>\n        <div class=\"value\">{{ DateTime.fromISO($json.start || $json.startTime).toFormat('EEEE, MMMM d, yyyy') }} at {{ DateTime.fromISO($json.start || $json.startTime).toFormat('h:mm a') }}</div>\n      </div>\n      \n      <div class=\"detail-row\">\n        <div class=\"label\">Location</div>\n        <div class=\"value\">{{ $env.CLINIC_NAME }}<br>{{ $env.CLINIC_ADDRESS || '' }}</div>\n      </div>\n      \n      <div class=\"detail-row\">\n        <div class=\"label\">Booking ID</div>\n        <div class=\"value\">{{ ($json.id || $json.uid) }}</div>\n      </div>\n      \n      <a href=\"{{ $json.rescheduleUrl || $json.reschedule_url || $env.SCHEDULING_BASE_URL + '/reschedule/' + ($json.id || $json.uid) }}\" class=\"button\">Reschedule Appointment</a>\n      \n      <p style=\"margin-top: 30px; font-size: 14px; color: #6b7280;\">\n        <strong>Need to cancel or have questions?</strong><br>\n        Call us at {{ $env.CLINIC_PHONE }} or reply to this email.\n      </p>\n    </div>\n    <div class=\"footer\">\n      <p>{{ $env.CLINIC_NAME }}<br>\n      {{ $env.CLINIC_PHONE }} | {{ $env.CLINIC_EMAIL }}</p>\n      <p style=\"margin-top: 10px; font-size: 11px;\">\n        This is an automated message. Please do not reply directly to this email.\n      </p>\n    </div>\n  </div>\n</body>\n</html>",
        "options": {
          "ccEmail": "={{$env.SENDGRID_BCC_EMAIL}}",
          "attachments": "={{$env.ENABLE_CALENDAR_ATTACHMENT === 'true' ? 'calendar_invite.ics' : ''}}"
        }
      },
      "id": "email-confirmation-209",
      "name": "Send Email Confirmation",
      "type": "n8n-nodes-base.sendGrid",
      "typeVersion": 1.1,
      "position": [1250, 400],
      "credentials": {
        "sendGridApi": {
          "id": "{{$env.SENDGRID_CREDENTIAL_ID}}",
          "name": "{{$env.SENDGRID_CREDENTIAL_NAME}}"
        }
      },
      "notes": "PURPOSE: Send branded email confirmation with appointment details and calendar invite.\nINPUTS: Booking confirmation + patient email.\nOUTPUTS: SendGrid message ID and delivery status.\nCONFIG: SENDGRID_FROM_EMAIL, BRAND_PRIMARY_COLOR for template customization.\nFEATURES: Responsive HTML template, reschedule button, clinic branding.\nOPTIONS: BCC to clinic email (SENDGRID_BCC_EMAIL), optional .ics attachment.\nALTERNATES: Swap for Mailgun, AWS SES, or Microsoft Graph (Outlook).\nCOMPLIANCE: Includes unsubscribe footer if ENABLE_UNSUBSCRIBE=true."
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "merge-confirmations-210",
      "name": "Merge All Confirmations",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [1450, 300],
      "notes": "PURPOSE: Consolidate outputs from CRM update, SMS, and email into single response.\nINPUTS: CRM update status, SMS delivery status, email delivery status.\nOUTPUTS: Unified confirmation object with all delivery metadata.\nUSE CASE: Provides comprehensive delivery report for webhook response and audit logs."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Appointment booked successfully\",\n  \"appointment_id\": $('Create Booking in Scheduling System').first().json.id || $('Create Booking in Scheduling System').first().json.uid,\n  \"patient_email\": $('Webhook Trigger - Booking Request').first().json.body.email,\n  \"patient_name\": $('Webhook Trigger - Booking Request').first().json.body.name,\n  \"scheduled_time\": $('Create Booking in Scheduling System').first().json.start || $('Create Booking in Scheduling System').first().json.startTime,\n  \"scheduled_time_formatted\": DateTime.fromISO($('Create Booking in Scheduling System').first().json.start || $('Create Booking in Scheduling System').first().json.startTime).toFormat('EEEE, MMMM d, yyyy \\\\at h:mm a'),\n  \"service_type\": $('Webhook Trigger - Booking Request').first().json.body.service_type,\n  \"channel\": $env.SCHEDULING_PROVIDER_NAME || 'Cal.com',\n  \"booking_url\": $('Create Booking in Scheduling System').first().json.bookingUrl || $('Create Booking in Scheduling System').first().json.url,\n  \"reschedule_url\": $('Create Booking in Scheduling System').first().json.rescheduleUrl || ($env.SCHEDULING_BASE_URL + '/reschedule/' + ($('Create Booking in Scheduling System').first().json.id || $('Create Booking in Scheduling System').first().json.uid)),\n  \"metadata\": {\n    \"crm_updated\": $('Update CRM with Booking Status').first().json.id ? true : false,\n    \"sms_sent\": $('Send SMS Confirmation').first().json.sid ? true : false,\n    \"email_sent\": $('Send Email Confirmation').first().json.messageId ? true : false,\n    \"sms_sid\": $('Send SMS Confirmation').first().json.sid || null,\n    \"email_message_id\": $('Send Email Confirmation').first().json.messageId || null\n  },\n  \"timestamp\": $now.toISO()\n} }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "success-response-211",
      "name": "Return Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1650, 300],
      "notes": "PURPOSE: Return standardized appointment_status.json to caller.\nINPUTS: Merged confirmation data from all channels.\nOUTPUTS: HTTP 200 with appointment details, URLs, and delivery metadata.\nFORMAT: Includes appointment_id for Module 03 (reminders), formatted time for display.\nMETADATA: Delivery confirmation for CRM, SMS, email with message IDs for tracking.\nINTEGRATION: Output can trigger Module 03 (Appointment Reminders) or Module 04 (Pre-Visit Forms)."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": ""
          },
          "conditions": [
            {
              "id": "error-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "error-check-212",
      "name": "Check for Slot Selection Errors",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [850, 450],
      "notes": "PURPOSE: Detect when no time slots are available in requested timeframe.\nINPUTS: Slot selection output with potential error flag.\nOUTPUTS: Routes to error response if error=true, continues to booking if no error.\nERROR HANDLING: Provides alternative dates in error response for better UX."
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"No available appointments\",\n  \"message\": $json.message || \"No time slots available in the requested timeframe. Please try alternative dates.\",\n  \"retry_after\": $json.retry_after || DateTime.now().plus({days: 7}).toISO(),\n  \"alternatives\": $json.alternatives || [],\n  \"contact_info\": {\n    \"phone\": $env.CLINIC_PHONE,\n    \"email\": $env.CLINIC_EMAIL\n  },\n  \"timestamp\": $now.toISO()\n} }}",
        "options": {
          "responseCode": 409,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "no-availability-response-213",
      "name": "Return No Availability Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1050, 550],
      "notes": "PURPOSE: Handle scenario where no appointment slots are available.\nINPUTS: Error object from slot selection with retry_after date.\nOUTPUTS: HTTP 409 (Conflict) with retry date and clinic contact info.\nUX IMPROVEMENT: Provides actionable next steps (retry date, alternative contact methods).\nCLIENT HANDLING: Frontend can auto-retry after retry_after date or prompt manual booking."
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "id": "error-handler-214",
      "name": "Error Handler",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1250, 550],
      "onError": "continueErrorOutput",
      "notes": "PURPOSE: Catch execution errors (API failures, network issues) and prevent workflow crash.\nINPUTS: Any upstream error from scheduling API, CRM, SMS, or email nodes.\nOUTPUTS: Error details for logging service.\nBEST PRACTICE: Connect to error notification workflow or logging service in production.\nRECOVERY: Can trigger fallback actions (e.g., save to queue for manual processing)."
    }
  ],
  "connections": {
    "Webhook Trigger - Booking Request": {
      "main": [
        [
          {
            "node": "Validate Booking Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Booking Data": {
      "main": [
        [
          {
            "node": "Check Scheduling Availability",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Scheduling Availability": {
      "main": [
        [
          {
            "node": "Select Best Time Slot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Best Time Slot": {
      "main": [
        [
          {
            "node": "Check for Slot Selection Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Slot Selection Errors": {
      "main": [
        [
          {
            "node": "No Availability Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Booking in Scheduling System",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Booking in Scheduling System": {
      "main": [
        [
          {
            "node": "Update CRM with Booking Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send SMS Confirmation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Email Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update CRM with Booking Status": {
      "main": [
        [
          {
            "node": "Merge All Confirmations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send SMS Confirmation": {
      "main": [
        [
          {
            "node": "Merge All Confirmations",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send Email Confirmation": {
      "main": [
        [
          {
            "node": "Merge All Confirmations",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge All Confirmations": {
      "main": [
        [
          {
            "node": "Return Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "{{$env.ERROR_WORKFLOW_ID}}"
  },
  "staticData": null,
  "tags": [
    {
      "name": "Aigent",
      "id": "aigent-module"
    },
    {
      "name": "Clinic-Template",
      "id": "clinic-template"
    },
    {
      "name": "Scheduling",
      "id": "scheduling"
    },
    {
      "name": "Booking",
      "id": "booking"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-29T00:00:00.000Z",
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "{{$env.N8N_INSTANCE_ID}}",
    "description": "Aigent Universal Clinic Template - Module 02: Consult Booking & Scheduling. Accepts booking requests from Module 01 or direct input, checks availability in scheduling system (Cal.com/Acuity/SimplyBook), creates appointment, updates CRM, sends SMS and email confirmations. Returns standardized appointment_status.json for downstream modules.",
    "author": "Aigent Automation Engineering",
    "version": "1.0.0",
    "license": "Proprietary - Aigent Company",
    "documentation": "https://docs.aigent.company/templates/module-02",
    "dependencies": {
      "optional_upstream": ["Aigent_Module_01_Intake_LeadCapture"],
      "optional_downstream": ["Aigent_Module_03_Appointment_Reminders", "Aigent_Module_04_PreVisit_Forms"]
    }
  }
}
